import streamlit as st
import requests
import json
from openai import OpenAI
import pandas as pd
from datetime import datetime
import urllib3

# Suprimir advertencias SSL (solo para desarrollo)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Consulta de Estaciones - CORNARE",
    page_icon="üå°Ô∏è",
    layout="wide"
)

# T√≠tulo principal
st.title("üå°Ô∏è Consulta de Estaciones Meteorol√≥gicas CORNARE")
st.markdown("Consulta datos de estaciones y haz preguntas usando IA")

# Instrucciones importantes
with st.expander("üìã Instrucciones de uso", expanded=False):
    st.markdown("""
    **üöÄ Pasos para usar la aplicaci√≥n:**
    
    1. **Configura tu API Key de OpenAI** en la barra lateral
    2. **Selecciona una estaci√≥n** del listbox (incluye c√≥digo, municipio y regi√≥n)
    3. **Deja desmarcado "Verificar certificado SSL"** (recomendado)
    4. **Haz clic en "Obtener Datos de Estaci√≥n"**
    5. **Revisa la fecha y hora de consulta** mostrada
    6. **Haz preguntas** sobre los datos usando IA
    
    **‚ö†Ô∏è Si ves errores SSL:**
    - Aseg√∫rate de que "Verificar certificado SSL" est√© **desmarcado**
    - La API funciona correctamente desde navegador
    - Python requiere esta configuraci√≥n especial para CORNARE
    
    **üìç Sobre las estaciones:**
    - Se incluyen todas las estaciones activas de CORNARE
    - Informaci√≥n basada en datos oficiales actualizados
    - Cobertura en m√∫ltiples regiones de Antioquia
    """)

# Sidebar para configuraci√≥n
st.sidebar.header("‚öôÔ∏è Configuraci√≥n")

# Campo para API Key de OpenAI
openai_api_key = st.sidebar.text_input(
    "üîë API Key de OpenAI:",
    type="password",
    placeholder="sk-..."
)

# Selectbox para elegir estaci√≥n
st.sidebar.subheader("üìç Selecci√≥n de Estaci√≥n")

# Crear opciones para el selectbox de manera simple
opciones_estaciones = []
for est in ESTACIONES_CORNARE:
    nombre_estacion = f"{est['codigo']} - {est['municipio']} ({est['region']})"
    opciones_estaciones.append(nombre_estacion)

# Encontrar el √≠ndice de la estaci√≥n 204 por defecto
indice_default = 0
for i, estacion in enumerate(ESTACIONES_CORNARE):
    if estacion['codigo'] == 204:
        indice_default = i
        break

estacion_seleccionada_str = st.sidebar.selectbox(
    "üè¢ Selecciona una estaci√≥n:",
    opciones_estaciones,
    index=indice_default,
    help="Selecciona la estaci√≥n meteorol√≥gica que deseas consultar"
)

# Extraer c√≥digo de la estaci√≥n seleccionada
try:
    estacion_codigo = estacion_seleccionada_str.split(' - ')[0]
    estacion_info = None
    for estacion in ESTACIONES_CORNARE:
        if str(estacion['codigo']) == str(estacion_codigo):
            estacion_info = estacion
            break
except:
    estacion_codigo = "204"
    estacion_info = {"codigo": 204, "municipio": "Rionegro", "region": "Valle de San Nicol√°s"}

# Mostrar informaci√≥n de la estaci√≥n seleccionada
if estacion_info:
    st.sidebar.info(f"üìç **{estacion_info['municipio']}**\n\nRegi√≥n: {estacion_info['region']}")

# Opci√≥n para verificaci√≥n SSL
verificar_ssl = st.sidebar.checkbox(
    "üîí Verificar certificado SSL",
    value=False,
    help="Desmarca si tienes problemas de conexi√≥n SSL"
)

if not verificar_ssl:
    st.sidebar.success("‚úÖ SSL deshabilitado - Deber√≠a funcionar correctamente")
else:
    st.sidebar.info("üîí SSL habilitado - Si hay errores, desmarca la opci√≥n")

# URL base de la API
API_BASE_URL = st.sidebar.selectbox(
    "üåê Protocolo de conexi√≥n:",
    ["https://marco.cornare.gov.co/api/v1/estaciones", 
     "http://marco.cornare.gov.co/api/v1/estaciones"],
    help="Si HTTPS falla, prueba con HTTP"
)

def obtener_datos_estacion(codigo_estacion, verificar_ssl=False):
    """Obtiene los datos de una estaci√≥n espec√≠fica"""
    try:
        url = f"{API_BASE_URL}/{codigo_estacion}"
        
        # Headers para mejorar compatibilidad (similares al navegador)
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'es-ES,es;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
        }
        
        # Realizar request con configuraci√≥n espec√≠fica
        response = requests.get(
            url, 
            headers=headers,
            timeout=20,
            verify=verificar_ssl,  # Usar el valor del checkbox
            allow_redirects=True
        )
        
        if response.status_code == 200:
            try:
                return response.json(), None
            except json.JSONDecodeError as e:
                return None, f"Error al decodificar JSON: {str(e)}"
        else:
            return None, f"Error HTTP {response.status_code}: {response.text[:200]}"
            
    except requests.exceptions.SSLError as e:
        return None, f"Error SSL: {str(e)}. ‚úÖ SOLUCI√ìN: Desmarca 'Verificar certificado SSL' en la barra lateral."
    except requests.exceptions.ConnectionError as e:
        return None, f"Error de conexi√≥n: {str(e)}. Verifica tu conexi√≥n a internet."
    except requests.exceptions.Timeout as e:
        return None, f"Timeout: La API tard√≥ demasiado en responder. {str(e)}"
    except requests.exceptions.RequestException as e:
        return None, f"Error de request: {str(e)}"
    except Exception as e:
        return None, f"Error inesperado: {str(e)}"

def formatear_datos_para_ai(datos_json):
    """Formatea los datos JSON para enviar a OpenAI"""
    # Informaci√≥n b√°sica
    info_basica = f"""
INFORMACI√ìN GENERAL DE LA ESTACI√ìN:
- ID: {datos_json.get('id', 'N/A')}
- C√≥digo: {datos_json.get('codigo', 'N/A')}
- Municipio ID: {datos_json.get('municipio', 'N/A')}
- Regi√≥n: {datos_json.get('region', 'N/A')}
- Ubicaci√≥n: {datos_json.get('ubicacion_campo', 'N/A')}
- Red: {datos_json.get('red', 'N/A')}
- Clasificaci√≥n: {datos_json.get('clasificacion', 'N/A')}
- Corriente: {datos_json.get('corriente', 'N/A')}
- Etiqueta completa: {datos_json.get('label', 'N/A')}

COORDENADAS:
- Latitud: {datos_json.get('latitud', 'N/A')}
- Longitud: {datos_json.get('longitud', 'N/A')}
"""
    
    # Informaci√≥n detallada de sensores
    sensores_info = "\nMEDICIONES ACTUALES DE SENSORES:\n"
    
    if 'sensores' in datos_json and isinstance(datos_json['sensores'], dict):
        for sensor_tipo, sensor_data in datos_json['sensores'].items():
            if isinstance(sensor_data, dict):
                nombre = sensor_data.get('parametro_nombre_corto', sensor_tipo)
                valor = sensor_data.get('valor', 'N/A')
                categoria = sensor_data.get('categoria_value', 'N/A')
                codigo = sensor_data.get('codigo', 'N/A')
                indice = sensor_data.get('indice', 'N/A')
                
                sensores_info += f"""
‚Ä¢ {nombre} ({sensor_tipo}):
  - Valor actual: {valor}
  - Estado/Categor√≠a: {categoria}
  - C√≥digo: {codigo}
  - √çndice: {indice}
"""
    
    return info_basica + sensores_info + """
CONTEXTO ADICIONAL:
Esta estaci√≥n forma parte de la red de monitoreo ambiental de CORNARE y mide diversos par√°metros 
de calidad del aire, condiciones meteorol√≥gicas y otros factores ambientales en tiempo real.
"""

def consultar_openai(prompt, contexto, api_key):
    """Realiza consulta a OpenAI con el contexto de los datos"""
    try:
        client = OpenAI(api_key=api_key)
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system", 
                    "content": f"""Eres un especialista en monitoreo ambiental y calidad del aire de CORNARE 
                    (Corporaci√≥n Aut√≥noma Regional del Centro de Antioquia). 
                    
                    Tienes experiencia en:
                    - An√°lisis de calidad del aire y contaminantes atmosf√©ricos
                    - Interpretaci√≥n de √≠ndices de calidad ambiental
                    - Par√°metros meteorol√≥gicos y su impacto en la salud
                    - Material particulado (PM2.5, PM10), gases como NO‚ÇÇ, O‚ÇÉ, CO, SO‚ÇÇ
                    - Compuestos como H‚ÇÇS, NH‚ÇÉ, VOC
                    - Mediciones de ruido ambiental
                    
                    Responde preguntas bas√°ndote √∫nicamente en los siguientes datos de la estaci√≥n:
                    
                    {contexto}
                    
                    INSTRUCCIONES:
                    - Proporciona respuestas claras, t√©cnicas pero comprensibles
                    - Interpreta los valores seg√∫n est√°ndares de calidad del aire
                    - Explica qu√© significan las categor√≠as (Buena, Moderada, etc.)
                    - Si un valor indica riesgo para la salud, menci√≥nalo
                    - Si no tienes informaci√≥n espec√≠fica, menciona que no est√° disponible
                    - Usa unidades de medida apropiadas cuando sea relevante
                    - Relaciona los datos con posibles impactos ambientales o de salud cuando sea apropiado"""
                },
                {"role": "user", "content": prompt}
            ],
            max_tokens=1200,
            temperature=0.3
        )
        
        return response.choices[0].message.content, None
    except Exception as e:
        return None, f"Error con OpenAI: {str(e)}"

# Bot√≥n para obtener datos
if st.sidebar.button("üîÑ Obtener Datos de Estaci√≥n", type="primary"):
    if estacion_codigo:
        with st.spinner("Obteniendo datos de la estaci√≥n..."):
            # Registrar timestamp de consulta
            timestamp_consulta = datetime.now()
            datos, error = obtener_datos_estacion(estacion_codigo, verificar_ssl)
            
        if datos:
            st.session_state['datos_estacion'] = datos
            st.session_state['estacion_codigo'] = estacion_codigo
            st.session_state['estacion_info'] = estacion_info
            st.session_state['timestamp_consulta'] = timestamp_consulta
            st.success(f"‚úÖ Datos obtenidos exitosamente para la estaci√≥n {estacion_codigo}")
            st.info(f"üïê Consultado el: {timestamp_consulta.strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            st.error(f"‚ùå {error}")
    else:
        st.warning("‚ö†Ô∏è Por favor selecciona una estaci√≥n")

# Mostrar datos si est√°n disponibles
if 'datos_estacion' in st.session_state:
    datos = st.session_state['datos_estacion']
    estacion_info = st.session_state.get('estacion_info', {})
    timestamp_consulta = st.session_state.get('timestamp_consulta', datetime.now())
    
    # Mostrar informaci√≥n de consulta
    col_info1, col_info2 = st.columns([2, 1])
    with col_info1:
        st.success(f"üìä **Datos de la Estaci√≥n {datos.get('codigo', 'N/A')}**")
    with col_info2:
        st.info(f"üïê **Consultado:** {timestamp_consulta.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Crear dos columnas
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üìä Informaci√≥n de la Estaci√≥n")
        
        # Informaci√≥n b√°sica con datos del CSV y de la API
        st.subheader("‚ÑπÔ∏è Datos Generales")
        
        # Informaci√≥n del CSV (si est√° disponible)
        if estacion_info:
            st.write(f"**Estaci√≥n:** {estacion_info['codigo']} - {estacion_info['municipio']}")
            st.write(f"**Regi√≥n:** {estacion_info['region']}")
        
        # Informaci√≥n de la API
        st.write(f"**ID API:** {datos.get('id', 'N/A')}")
        st.write(f"**C√≥digo API:** {datos.get('codigo', 'N/A')}")
        st.write(f"**Ubicaci√≥n:** {datos.get('ubicacion_campo', 'N/A')}")
        st.write(f"**Red:** {datos.get('red', 'N/A')}")
        st.write(f"**Clasificaci√≥n:** {datos.get('clasificacion', 'N/A')}")
        
        # Informaci√≥n adicional
        if datos.get('label'):
            st.write(f"**Descripci√≥n completa:** {datos.get('label')}")
        
        # Coordenadas y mapa
        st.subheader("üó∫Ô∏è Ubicaci√≥n")
        st.write(f"**Latitud:** {datos.get('latitud', 'N/A')}")
        st.write(f"**Longitud:** {datos.get('longitud', 'N/A')}")
        
        # Mostrar mapa si tenemos coordenadas v√°lidas
        if datos.get('latitud') and datos.get('longitud'):
            try:
                map_data = pd.DataFrame({
                    'lat': [float(datos['latitud'])],
                    'lon': [float(datos['longitud'])]
                })
                st.map(map_data, zoom=12)
            except (ValueError, TypeError):
                st.write("*(Coordenadas no v√°lidas para mostrar mapa)*")
        
        # Sensores
        if 'sensores' in datos and datos['sensores']:
            st.subheader("üî¨ Sensores y Mediciones")
            sensores = datos['sensores']
            
            # Crear DataFrame con informaci√≥n de sensores para mejor visualizaci√≥n
            if isinstance(sensores, dict):
                sensor_data = []
                for sensor_tipo, sensor_info in sensores.items():
                    if isinstance(sensor_info, dict):
                        sensor_data.append({
                            'Par√°metro': sensor_info.get('parametro_nombre_corto', sensor_tipo),
                            'Valor': sensor_info.get('valor', 'N/A'),
                            'Categor√≠a': sensor_info.get('categoria_value', 'N/A'),
                            'C√≥digo': sensor_info.get('codigo', 'N/A'),
                            '√çndice': sensor_info.get('indice', 'N/A')
                        })
                
                if sensor_data:
                    df_sensores = pd.DataFrame(sensor_data)
                    st.dataframe(df_sensores, use_container_width=True)
                    
                    # Mostrar m√©tricas destacadas
                    st.subheader("üìä Mediciones Destacadas")
                    
                    # Crear columnas para m√©tricas
                    metrics_cols = st.columns(4)
                    
                    # M√©tricas importantes
                    importantes = ['temperatura', 'humedad', 'PM25', 'O3']
                    col_idx = 0
                    
                    for param in importantes:
                        if param in sensores:
                            sensor = sensores[param]
                            with metrics_cols[col_idx % 4]:
                                st.metric(
                                    label=sensor.get('parametro_nombre_corto', param),
                                    value=f"{sensor.get('valor', 'N/A')}",
                                    help=f"Categor√≠a: {sensor.get('categoria_value', 'N/A')}"
                                )
                            col_idx += 1
                    
                    # Alertas por categor√≠as
                    st.subheader("‚ö†Ô∏è Estado de Calidad del Aire")
                    categorias_malas = []
                    categorias_buenas = []
                    
                    for sensor_tipo, sensor_info in sensores.items():
                        categoria = sensor_info.get('categoria_value', '').lower()
                        param_nombre = sensor_info.get('parametro_nombre_corto', sensor_tipo)
                        
                        if categoria in ['mala', 'muy mala', 'da√±ina', 'peligrosa', 'naranja']:
                            categorias_malas.append(f"{param_nombre}: {categoria}")
                        elif categoria in ['buena', 'moderada', 'seguro']:
                            categorias_buenas.append(f"{param_nombre}: {categoria}")
                    
                    if categorias_malas:
                        st.error("üö® **Par√°metros con alertas:**")
                        for item in categorias_malas:
                            st.write(f"- {item}")
                    
                    if categorias_buenas:
                        st.success("‚úÖ **Par√°metros en buen estado:**")
                        for item in categorias_buenas[:5]:  # Mostrar solo los primeros 5
                            st.write(f"- {item}")
                        if len(categorias_buenas) > 5:
                            st.write(f"... y {len(categorias_buenas) - 5} m√°s")
    
    with col2:
        st.header("ü§ñ Consulta con IA")
        
        if openai_api_key:
            # Campo para preguntas
            pregunta = st.text_area(
                "üí¨ Haz una pregunta sobre los datos de la estaci√≥n:",
                placeholder="Ej: ¬øLos niveles de PM2.5 est√°n dentro de los l√≠mites seguros? ¬øQu√© tan buena es la calidad del aire actual? ¬øHay alg√∫n contaminante en niveles preocupantes?",
                height=100
            )
            
            if st.button("üöÄ Consultar IA") and pregunta:
                with st.spinner("Consultando con IA..."):
                    contexto = formatear_datos_para_ai(datos)
                    respuesta, error = consultar_openai(pregunta, contexto, openai_api_key)
                
                if respuesta:
                    st.subheader("üí° Respuesta de IA:")
                    st.write(respuesta)
                else:
                    st.error(f"‚ùå {error}")
            
            # Preguntas sugeridas
            st.subheader("üí° Preguntas Sugeridas:")
            preguntas_sugeridas = [
                "¬øCu√°l es la calidad del aire actual en esta estaci√≥n?",
                "¬øQu√© par√°metros est√°n en estado de alerta?",
                "¬øCu√°les son los valores de PM2.5 y PM10?",
                "¬øC√≥mo est√°n los niveles de ozono y di√≥xido de nitr√≥geno?",
                "¬øCu√°les son las condiciones meteorol√≥gicas actuales?",
                "¬øHay alg√∫n contaminante que supere los l√≠mites normales?",
                "Compara los valores de material particulado",
                "¬øQu√© significa el √≠ndice de cada sensor?",
                "¬øD√≥nde exactamente est√° ubicada esta estaci√≥n?",
                "Resume el estado ambiental general de la zona"
            ]
            
            for pregunta_sug in preguntas_sugeridas:
                if st.button(pregunta_sug, key=f"sug_{pregunta_sug}"):
                    with st.spinner("Consultando con IA..."):
                        contexto = formatear_datos_para_ai(datos)
                        respuesta, error = consultar_openai(pregunta_sug, contexto, openai_api_key)
                    
                    if respuesta:
                        st.subheader("üí° Respuesta de IA:")
                        st.write(respuesta)
                    else:
                        st.error(f"‚ùå {error}")
        else:
            st.warning("‚ö†Ô∏è Por favor ingresa tu API Key de OpenAI en la barra lateral para usar las funciones de IA")
    
    # Mostrar JSON raw
    with st.expander("üîç Ver JSON completo"):
        st.json(datos)

else:
    st.info("üëà Selecciona una estaci√≥n en la barra lateral y haz clic en 'Obtener Datos' para comenzar")
    
    # Mostrar informaci√≥n sobre estaciones disponibles
    st.subheader("üìç Estaciones Disponibles de CORNARE")
    
    # Crear DataFrame con informaci√≥n de estaciones
    df_estaciones = pd.DataFrame(ESTACIONES_CORNARE)
    df_estaciones['Estaci√≥n'] = df_estaciones.apply(lambda x: f"{x['codigo']} - {x['municipio']}", axis=1)
    
    # Mostrar estad√≠sticas
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total Estaciones", len(ESTACIONES_CORNARE))
    with col2:
        regiones_unicas = df_estaciones['region'].nunique()
        st.metric("Regiones", regiones_unicas)
    with col3:
        municipios_unicos = df_estaciones['municipio'].nunique()
        st.metric("Municipios", municipios_unicos)
    
    # Mostrar distribuci√≥n por regi√≥n
    st.subheader("üìä Distribuci√≥n por Regi√≥n")
    region_counts = df_estaciones['region'].value_counts()
    st.bar_chart(region_counts)
    
    # Mostrar tabla de estaciones
    with st.expander("üóÇÔ∏è Ver todas las estaciones disponibles", expanded=False):
        st.dataframe(
            df_estaciones[['codigo', 'municipio', 'region']].rename(columns={
                'codigo': 'C√≥digo',
                'municipio': 'Municipio',
                'region': 'Regi√≥n'
            }),
            use_container_width=True
        )

# Footer
st.markdown("---")
st.markdown("**üå± Desarrollado para consulta de datos meteorol√≥gicos de CORNARE**")
st.markdown("*‚ú® Aseg√∫rate de tener una API Key v√°lida de OpenAI para usar las funciones de IA*")
st.markdown(f"*üìä Incluye {len(ESTACIONES_CORNARE)} estaciones activas de monitoreo ambiental*")
